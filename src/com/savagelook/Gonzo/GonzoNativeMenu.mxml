<?xml version="1.0" encoding="utf-8"?>
<mx:FlexNativeMenu xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   showRoot="false" 
				   labelField="@label" 
				   keyEquivalentField="@keyEquivalent" 
				   keyEquivalentModifiersFunction="keyEquivalentModifiers"
				   dataProvider="{gonzoMenuData}"
				   itemClick="gonzoItemClickHandler(event)">
	<fx:Declarations>
		<fx:XML format="e4x" id="gonzoMenuData">
			<root>
				<menuitem label="File">
					<menuitem label="New..." keyEquivalent="n" controlKey="true" id="file_new"/>
					<menuitem label="Open..." keyEquivalent="o" controlKey="true" id="file_open"/>
					<menuitem type="separator"/>
					<menuitem label="Close" id="file_close" keyEquivalent="w" controlKey="true"/>
					<menuitem label="Close All" id="file_closeAll" keyEquivalent="w" controlKey="true" shiftKey="true"/>
					<menuitem type="separator"/>
					<menuitem label="Save" keyEquivalent="s" controlKey="true" id="file_save"/>
					<menuitem label="Save As..." id="file_saveAs"/>
					<menuitem label="Save All" keyEquivalent="s" controlKey="true" shiftKey="true" id="file_saveAll"/>
					<menuitem type="separator"/>
					<menuitem label="Export HTML..." keyEquivalent="h" controlKey="true" id="file_export_html"/>
					<menuitem type="separator"/>
					<menuitem label="Quit" keyEquivalent="q" controlKey="true" id="file_exit"/>
				</menuitem>
				<menuitem label="Edit">
					<menuitem label="Undo" keyEquivalent="z" controlKey="true" id="edit_undo" enabled="false"/>
					<menuitem type="separator"/>
					<menuitem label="Cut" keyEquivalent="x" controlKey="true" id="edit_cut"/>
					<menuitem label="Copy" keyEquivalent="c" controlKey="true" id="edit_copy"/>
					<menuitem label="Paste" keyEquivalent="v" controlKey="true" id="edit_paste"/>
					<menuitem type="separator"/>
					<menuitem label="Select All" keyEquivalent="a" controlKey="true" id="edit_selectAll"/>
					<menuitem type="separator"/>
					<menuitem label="Find..." keyEquivalent="f" controlKey="true" id="edit_find" enabled="false"/>
				</menuitem>
				<menuitem label="Format">
					<menuitem label="Word Wrap" id="format_wordWrap" type="check" toggled="true"/>
				</menuitem>
				<menuitem label="Window">
					<menuitem label="Show Preview" id="window_preview" type="check" toggled="true" keyEquivalent="p" controlKey="true"/>
				</menuitem>
				<menuitem label="Help">
					<menuitem label="Cheat Sheet" id="help_tutorial" keyEquivalent="t" controlKey="true" shiftKey="true"/>
					<menuitem type="separator"/>
					<menuitem label="About Gonzo..." id="help_about" enabled="false"/>
				</menuitem>
			</root>
		</fx:XML>	
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.containers.VBox;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexNativeMenuEvent;
			import mx.managers.PopUpManager;
			
			public var isWin:Boolean = false;
			public var isMac:Boolean = false;
			public var gonzo:Gonzo = null;
			
			private function doFileNew():void {
				var file:File = File.documentsDirectory.resolvePath(Gonzo.DEFAULT_FILENAME);
				
				file.addEventListener(Event.SELECT, function(event:Event):void {
					var savedFile:File = event.target as File;
					var editor:GonzoTextArea = gonzo.createAndAddNewEditor(savedFile.nativePath);
					gonzo.updateGonzoWithEditor(editor, false);
				});
				file.browseForSave("Create a new markdown file");
			}
			
			private function doFileOpen():void {
				var file:File = File.documentsDirectory;
				file.addEventListener(Event.SELECT, function(event:Event):void {
					var openedFile:File = event.target as File;
					var editor:GonzoTextArea = gonzo.createAndAddNewEditor(openedFile.nativePath);
					editor.text = GonzoUtils.readStringFromFile(openedFile);
					gonzo.updateGonzoWithEditor(editor);
				});
				file.browseForOpen("Open a markdown file");
			}
			
			private function doFileSaveAs():void {
				var file:File;
				var editor:GonzoTextArea = gonzo.getCurrentEditor();
				
				if (editor == null) {
					return;
				}
				
				file = new File(editor.fullPath);
				file.addEventListener(Event.SELECT, function(event:Event):void {
					var saveFile:File = event.target as File;
					GonzoUtils.writeStringToFilename(saveFile.nativePath, GonzoUtils.stripNonPrintableCharacters(editor.text));
					editor.isModified = false;
					editor.fullPath = saveFile.nativePath;
					gonzo.updateGonzoWithEditor(editor, false);
				});
				file.browseForSave("Save file as...");
			}
			
			public function doFileSave(editor:GonzoTextArea = null):void {
				editor = editor != null ? editor : gonzo.getCurrentEditor();
				
				if (editor == null) {
					return;
				}
				
				GonzoUtils.writeStringToFilename(editor.fullPath, GonzoUtils.stripNonPrintableCharacters(editor.text));
				editor.isModified = false;
				gonzo.updateGonzoWithEditor(editor, false);
			}
			
			private function doFileExportHtml():void {
				var editor:GonzoTextArea = gonzo.getCurrentEditor();
				
				if (editor == null) {
					return;
				}
				
				var file:File = File.documentsDirectory.resolvePath(editor.filename + ".html");
				file.addEventListener(Event.SELECT, function(event:Event):void {
					var saveFile:File = event.target as File;
					GonzoUtils.writeStringToFilename(saveFile.nativePath, gonzo.htmlRaw.text);
				});
				file.browseForSave("Export as HTML");
			}
			
			public function doFileClose():void {
				var editor:GonzoTextArea = gonzo.getCurrentEditor();
				if (editor == null) {
					return;
				}
				
				if (editor.isModified) {
					Alert.show(
						"'" + editor.filename + "' has been modified. Would you like to save it?",
						"Save your changes?",
						Alert.YES | Alert.NO | Alert.CANCEL,
						gonzo,
						function(event:CloseEvent):void {
							if (event.detail == Alert.YES) {
								gonzo.gonzoMenu.doFileSave(editor);
							} else if (event.detail == Alert.CANCEL) {
								return;
							}	
							gonzo.editorTabNavigator.removeChild(editor.parent);
							gonzo.callLater(function():void {
								editor = gonzo.getCurrentEditor();
								gonzo.updateGonzoWithEditor(editor, (editor == null ? false : editor.isModified));
							});
						}
					);
				} else {
					gonzo.editorTabNavigator.removeChild(editor.parent);
					gonzo.callLater(function():void {
						editor = gonzo.getCurrentEditor();
						gonzo.updateGonzoWithEditor(editor, (editor == null ? false : editor.isModified));
					});
				}
			}
			
			private function doEditUndo():void {
//				var editor:GonzoTextArea = gonzo.getCurrentEditor();
//				
//				if (editor == null) {
//					return;
//				}
//				
//				var label:String = gonzo.editorTabNavigator.selectedChild.label;
//				var editor:GonzoTextArea;
//				if (label == "markdown") {
//				//	editor = gonzo.markdownEditor;
//				} else if (label == "css") {
//					editor = gonzo.cssEditor;
//				}
//				
//				var undo:String = editor.popUndo();
//				if (undo != null) {
//					editor.text = undo;
//					gonzo.updateGonzoWithEditor(editor, true);
//				}
			}

			protected function gonzoItemClickHandler(event:FlexNativeMenuEvent):void
			{
				var node:XML = event.item as XML;
				var id:String = node.@id;
				var i:uint;
				var vbox:VBox;
				var editor:GonzoTextArea;
			
				if (id == "file_new") {
					doFileNew();
				} else if (id == "file_open") {
					doFileOpen();
				} else if (id == "file_save") {
					this.doFileSave();
				} else if (id == "file_saveAs") {
					this.doFileSaveAs();
				} else if (id == "file_close") {
					this.doFileClose();	
				} else if (id == "file_closeAll") {
					gonzo.checkForUnsavedEditors(function():void {
						gonzo.editorTabNavigator.removeAll();
						gonzo.updateGonzoWithEditor(null);
					});
				}  else if (id == "file_export_html") {
					this.doFileExportHtml();
				} else if (id == "file_exit") {
					gonzo.checkForUnsavedEditors(NativeApplication.nativeApplication.exit);
				} else if (id == "edit_undo") { 
					this.doEditUndo();
				} else if (id == "edit_redo") { 
					// TODO
				}else if (id == "edit_cut") { 
					NativeApplication.nativeApplication.cut();
				} else if (id == "edit_copy") { 
					NativeApplication.nativeApplication.copy();
				} else if (id == "edit_paste") { 
					NativeApplication.nativeApplication.paste();
				} else if (id == "edit_selectAll") { 
					NativeApplication.nativeApplication.selectAll();
				} else if (id == "window_preview") {
					if (node.@toggled == "true") {
						gonzo.gonzoSeparator.visible = gonzo.gonzoSeparator.includeInLayout = true;
						gonzo.previewTabNavigator.visible = gonzo.previewTabNavigator.includeInLayout = true;
					} else {
						gonzo.gonzoSeparator.visible = gonzo.gonzoSeparator.includeInLayout = false;
						gonzo.previewTabNavigator.visible = gonzo.previewTabNavigator.includeInLayout = false;
						gonzo.editorTabNavigator.percentWidth = 100;
					}
				} else if (id == "format_wordWrap") {
					var doWrap:Boolean = node.@toggled == "true";
					for (i = 0; i < gonzo.editorTabNavigator.numChildren; i++) {
						vbox = gonzo.editorTabNavigator.getChildAt(i) as VBox;
						editor = vbox.getChildByName("editor") as GonzoTextArea;
						editor.wordWrap = doWrap;
					}
				} else if (id == "help_tutorial") {
					for (i = 0; i < gonzo.editorTabNavigator.numChildren; i++) {
						vbox = gonzo.editorTabNavigator.getChildAt(i) as VBox;
						editor = vbox.getChildByName("editor") as GonzoTextArea;
						if (editor.isReference) {
							gonzo.editorTabNavigator.selectedIndex = i;
							return;
						}
					}
					
					editor = gonzo.createAndAddNewEditor(File.documentsDirectory.resolvePath(Gonzo.DEFAULT_FILENAME).nativePath);
					editor.isReference = true;
					editor.text = GonzoUtils.readStringFromFilename(File.applicationDirectory.nativePath + "/assets/cheat_sheet.md");
					gonzo.updateGonzoWithEditor(editor);
					editor.editable = false;
				} else {
					trace(event.label + "(" + id + ")");
				}
			}
			
			/**
			 * Handles key strokes in a platform specific way.  CTRL == CTRL on Windows,
			 * CTRL == COMMAND on Mac.
			 * 
			 * @param item An object that holds the menu entry for the keyEquivalent modifier
			 * 
			 * @return An array containing the modified keys pressed
			 */
			private function keyEquivalentModifiers(item:Object):Array
			{
				var result:Array = new Array();
				
				var keyEquivField:String = this.keyEquivalentField;
				var altKeyField:String;
				var ctrlKeyField:String;
				var shiftKeyField:String;
				if (item is XML)
				{
					altKeyField = "@altKey";
					ctrlKeyField = "@controlKey";
					shiftKeyField = "@shiftKey";
				}
				else if (item is Object)
				{
					altKeyField = "altKey";
					ctrlKeyField = "controlKey";
					shiftKeyField = "shiftKey";
				}
				
				if (item[keyEquivField] == null || item[keyEquivField].length == 0)
				{
					return result;
				}
				
				if (item[altKeyField] != null && item[altKeyField] == true)
				{
					if (isWin)
					{
						result.push(Keyboard.ALTERNATE);
					}
				}
				
				if (item[ctrlKeyField] != null && item[ctrlKeyField] == true)
				{
					if (isWin)
					{
						result.push(Keyboard.CONTROL);
					}
					else if (isMac)
					{
						result.push(Keyboard.COMMAND);
					}
				}
				
				if (item[shiftKeyField] != null && item[shiftKeyField] == true)
				{
					result.push(Keyboard.SHIFT);
				}
				
				return result;
			}

		]]>
	</fx:Script>
</mx:FlexNativeMenu>
