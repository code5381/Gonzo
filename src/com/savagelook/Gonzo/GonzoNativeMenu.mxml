<?xml version="1.0" encoding="utf-8"?>
<mx:FlexNativeMenu xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   showRoot="false" 
				   labelField="@label" 
				   keyEquivalentField="@keyEquivalent" 
				   keyEquivalentModifiersFunction="keyEquivalentModifiers"
				   dataProvider="{gonzoMenuData}"
				   itemClick="gonzoItemClickHandler(event)">
	<fx:Declarations>
		<fx:XML format="e4x" id="gonzoMenuData">
			<root>
				<menuitem label="File">
					<menuitem label="New...">
						<menuitem label="Markdown &amp; CSS" keyEquivalent="n" controlKey="true" id="file_new"/>
						<menuitem label="Markdown" id="file_newMarkdown"/>
						<menuitem label="CSS" id="file_newCss"/>
					</menuitem>
					<menuitem label="Open..." keyEquivalent="o" controlKey="true" id="file_open"/>
					<menuitem label="Save" keyEquivalent="s" controlKey="true" id="file_save"/>
					<menuitem label="Save As..." keyEquivalent="s" controlKey="true" shiftKey="true" id="file_saveAs"/>
					<menuitem type="separator"/>
					<menuitem label="Exit" keyEquivalent="w" controlKey="true" id="file_exit"/>
				</menuitem>
			</root>
		</fx:XML>	
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.events.FlexNativeMenuEvent;
			public var isWin:Boolean = false;
			public var isMac:Boolean = false;
			public var gonzo:Gonzo = null;
			
			private function doFileNew():void {
				// do something
			}
			
			private function doFileOpen():void {
				var file:File = new File();
				file.addEventListener(Event.SELECT, function(event:Event):void {
					var openedFile:File = event.target as File;
					gonzo.markdownEditor.text = GonzoUtils.readStringFromFile(openedFile);
					gonzo.currentMarkdownFile = openedFile.nativePath;
					gonzo.updateGonzo(gonzo.currentMarkdownFile);
				});
				file.browseForOpen("Open a markdown file...");
			}
			
			private function doFileSaveAs():void {
				var file:File = new File();
				file.addEventListener(Event.COMPLETE, function(event:Event):void {
					var savedFile:File = event.target as File;
					gonzo.currentMarkdownFile = savedFile.nativePath;
					gonzo.updateGonzo(gonzo.currentMarkdownFile);
				});
				file.save(GonzoUtils.stripNonPrintableCharacters(gonzo.markdownEditor.text), "Untitled.md");
			}
			
			private function doFileSave():void {
				GonzoUtils.writeStringToFilename(gonzo.currentMarkdownFile, gonzo.markdownEditor.text);
				
			}

			protected function gonzoItemClickHandler(event:FlexNativeMenuEvent):void
			{
				var node:XML = event.item as XML;
				var id:String = node.attribute("id");
				var file:File;
				
				if (id == "file_new") {
					this.doFileNew();
				} else if (id == "file_open") {
					this.doFileOpen();
				} else if (id == "file_save") {
					if (gonzo.currentMarkdownFile == "") {
						this.doFileSaveAs();
					} else {
						this.doFileSave();
					}
				} else if (id == "file_saveAs") {
					this.doFileSaveAs();
				} else if (id == "file_exit") {
					// check for unsaved buffers
					NativeApplication.nativeApplication.exit();
				} else {
					trace(event.label);
				}
			}
			
			/**
			 * Handles key strokes in a platform specific way.  CTRL == CTRL on Windows,
			 * CTRL == COMMAND on Mac.
			 * 
			 * @param item An object that holds the menu entry for the keyEquivalent modifier
			 * 
			 * @return An array containing the modified keys pressed
			 */
			private function keyEquivalentModifiers(item:Object):Array
			{
				var result:Array = new Array();
				
				var keyEquivField:String = this.keyEquivalentField;
				var altKeyField:String;
				var ctrlKeyField:String;
				var shiftKeyField:String;
				if (item is XML)
				{
					altKeyField = "@altKey";
					ctrlKeyField = "@controlKey";
					shiftKeyField = "@shiftKey";
				}
				else if (item is Object)
				{
					altKeyField = "altKey";
					ctrlKeyField = "controlKey";
					shiftKeyField = "shiftKey";
				}
				
				if (item[keyEquivField] == null || item[keyEquivField].length == 0)
				{
					return result;
				}
				
				if (item[altKeyField] != null && item[altKeyField] == true)
				{
					if (isWin)
					{
						result.push(Keyboard.ALTERNATE);
					}
				}
				
				if (item[ctrlKeyField] != null && item[ctrlKeyField] == true)
				{
					if (isWin)
					{
						result.push(Keyboard.CONTROL);
					}
					else if (isMac)
					{
						result.push(Keyboard.COMMAND);
					}
				}
				
				if (item[shiftKeyField] != null && item[shiftKeyField] == true)
				{
					result.push(Keyboard.SHIFT);
				}
				
				return result;
			}

		]]>
	</fx:Script>
</mx:FlexNativeMenu>
