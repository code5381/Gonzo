<?xml version="1.0" encoding="utf-8"?>
<mx:FlexNativeMenu xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   showRoot="false" 
				   labelField="@label" 
				   keyEquivalentField="@keyEquivalent" 
				   keyEquivalentModifiersFunction="keyEquivalentModifiers"
				   dataProvider="{gonzoMenuData}"
				   itemClick="gonzoItemClickHandler(event)">
	<fx:Declarations>
		<fx:XML format="e4x" id="gonzoMenuData">
			<root>
				<menuitem label="File">
					<menuitem label="New..." keyEquivalent="n" controlKey="true" id="fileNew"/>
					<menuitem label="Open..." keyEquivalent="o" controlKey="true" id="file_open"/>
					<menuitem type="separator"/>
					<menuitem label="Close" id="file_close" keyEquivalent="w" controlKey="true"/>
					<menuitem label="Close All" id="file_closeAll" keyEquivalent="w" controlKey="true" shiftKey="true"/>
					<menuitem type="separator"/>
					<menuitem label="Save" keyEquivalent="s" controlKey="true" id="file_save"/>
					<menuitem label="Save As..." id="file_saveAs"/>
					<menuitem label="Save All" keyEquivalent="s" controlKey="true" shiftKey="true" id="file_saveAll" />
					<menuitem type="separator"/>
					<menuitem label="Export HTML..." keyEquivalent="h" controlKey="true" id="file_export_html"/>
					<menuitem type="separator"/>
					<menuitem label="Quit" keyEquivalent="q" controlKey="true" id="file_exit"/>
				</menuitem>
				<menuitem label="Edit">
					<menuitem label="Undo" keyEquivalent="z" controlKey="true" id="edit_undo" />
					<menuitem type="separator"/>
					<menuitem label="Cut" keyEquivalent="x" controlKey="true" id="edit_cut"/>
					<menuitem label="Copy" keyEquivalent="c" controlKey="true" id="edit_copy"/>
					<menuitem label="Paste" keyEquivalent="v" controlKey="true" id="edit_paste"/>
					<menuitem type="separator"/>
					<menuitem label="Select All" keyEquivalent="a" controlKey="true" id="edit_selectAll"/>
					<menuitem type="separator"/>
					<menuitem label="Find..." keyEquivalent="f" controlKey="true" id="edit_find" enabled="false"/>
				</menuitem>
				<menuitem label="Markdown">
					<menuitem label="Heading">
						<menuitem label="H1" keyEquivalent="1" controlKey="true" id="markdown_heading1" />
						<menuitem label="H2" keyEquivalent="2" controlKey="true" id="markdown_heading2" />
						<menuitem label="H3" keyEquivalent="3" controlKey="true" id="markdown_heading3" />
						<menuitem label="H4" keyEquivalent="4" controlKey="true" id="markdown_heading4" />
						<menuitem label="H5" keyEquivalent="5" controlKey="true" id="markdown_heading5" />
						<menuitem label="H6" keyEquivalent="6" controlKey="true" id="markdown_heading6" />
					</menuitem>
					<menuitem label="Horizontal Rule" keyEquivalent="r" controlKey="true" id="markdown_hr" />
					<menuitem label="Blockquote" keyEquivalent="u" controlKey="true" id="markdown_blockquote"/>
					<menuitem label="Code (block)" keyEquivalent="d" controlKey="true" shiftKey="true" id="markdown_codeBlock"/>
					<menuitem type="separator"/>
					<menuitem label="Link..." keyEquivalent="l" controlKey="true" shiftKey="true" id="markdown_link" />
					<menuitem label="Image..." keyEquivalent="i" controlKey="true" shiftKey="true" id="markdown_image" />
					<menuitem type="separator"/>
					<menuitem label="Link (inline)" keyEquivalent="l" controlKey="true" id="markdown_linkInline" />
					<menuitem label="Image (inline)" keyEquivalent="i" controlKey="true" id="markdown_imageInline" />
					<menuitem label="Emphasis" keyEquivalent="e" controlKey="true" id="markdown_em"/>
					<menuitem label="Strong" keyEquivalent="b" controlKey="true" id="markdown_strong"/>
					<menuitem label="Code (inline)" keyEquivalent="d" controlKey="true" id="markdown_codeInline"/>
				</menuitem>
				<menuitem label="Format">
					<menuitem label="Word Wrap" id="format_wordWrap" type="check" toggled="true"/>
					<menuitem type="separator"/>
					<menuitem label="Shift Right" keyEquivalent="Left" controlKey="true" id="format_shiftRight"/>
					<menuitem label="Shift Left" id="format_shiftLeft"/>
				</menuitem>
				<menuitem label="Window">
					<menuitem label="Show Preview" id="window_preview" type="check" toggled="true" keyEquivalent="p" controlKey="true"/>
				</menuitem>
				<menuitem label="Help">
					<menuitem label="Cheat Sheet" id="help_tutorial" keyEquivalent="t" controlKey="true" shiftKey="true"/>
					<menuitem type="separator"/>
					<menuitem label="About Gonzo..." id="help_about" enabled="false"/>
				</menuitem>
			</root>
		</fx:XML>	
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.containers.VBox;
			import mx.controls.Alert;
			import mx.controls.textClasses.TextRange;
			import mx.events.CloseEvent;
			import mx.events.FlexNativeMenuEvent;
			import mx.managers.PopUpManager;
			
			public var isWin:Boolean = false;
			public var isMac:Boolean = false;
			public var gonzo:Gonzo = null;
			
			private function doFileNew():void {
				var file:File = File.documentsDirectory.resolvePath(
					Gonzo.DEFAULT_FILENAME + " " + (Gonzo.UNTITLED_INDEX++).toString() + 
					"." + Gonzo.DEFAULT_EXTENSION 
				);
				var editor:GonzoTextArea = gonzo.createAndAddNewEditor(file.nativePath);
				gonzo.updateGonzoWithEditor(editor, false);
			}
			
			private function doFileOpen():void {
				var file:File = File.documentsDirectory;
				file.addEventListener(Event.SELECT, function(event:Event):void {
					var openedFile:File = event.target as File;
					var editor:GonzoTextArea = gonzo.createAndAddNewEditor(openedFile.nativePath);
					editor.text = GonzoUtils.readStringFromFile(openedFile);
					editor.hasBeenSaved = true;
					gonzo.updateGonzoWithEditor(editor);
				});
				file.browseForOpen("Open a markdown file");
			}
			
			private function doFileSaveAs(editor:GonzoTextArea = null, callback:Function = null):void {
				var file:File;
				editor = editor != null ? editor : gonzo.getCurrentEditor();
				
				if (editor == null) {
					return;
				}
				
				file = new File(editor.fullPath);
				file.addEventListener(Event.SELECT, function(event:Event):void {
					var saveFile:File = event.target as File;
					GonzoUtils.writeStringToFilename(saveFile.nativePath, GonzoUtils.stripNonPrintableCharacters(editor.text));
					editor.isModified = false;
					editor.fullPath = saveFile.nativePath;
					editor.hasBeenSaved = true;
					
					if (callback == null) {
						gonzo.updateGonzoWithEditor(editor, false);
					} else {
						callback(editor);
					}
				});
				file.browseForSave("Save file as...");
			}
			
			public function doFileSave(editor:GonzoTextArea = null, callback:Function = null):void {
				editor = editor != null ? editor : gonzo.getCurrentEditor();
				
				if (editor == null) {
					return;
				}
				
				if (!editor.hasBeenSaved) {
					this.doFileSaveAs();
					return;
				}
				
				GonzoUtils.writeStringToFilename(editor.fullPath, GonzoUtils.stripNonPrintableCharacters(editor.text));
				editor.isModified = false;
				editor.hasBeenSaved = true;
				
				if (callback == null) {
					gonzo.updateGonzoWithEditor(editor, false);
				} else {
					callback(editor);
				}
				
			}
			
			public function doFileSaveAsSeries(editor:GonzoTextArea, modifiedEditors:Vector.<GonzoTextArea>, callback:Function):void {
				var file:File = new File(editor.fullPath);
				
				file.addEventListener(Event.CANCEL, function(event:Event):void {
					doFileSaveSeries(modifiedEditors, callback);
				});
				
				file.addEventListener(Event.SELECT, function(event:Event):void {
					var saveFile:File = event.target as File;
					GonzoUtils.writeStringToFilename(saveFile.nativePath, GonzoUtils.stripNonPrintableCharacters(editor.text));
					editor.isModified = false;
					editor.fullPath = saveFile.nativePath;
					editor.hasBeenSaved = true;
					gonzo.updateGonzoWithEditor(editor, false);
					
					doFileSaveSeries(modifiedEditors, callback);
				});
				
				file.browseForSave("Save file as...");
			}
			
			public function doFileSaveSeries(modifiedEditors:Vector.<GonzoTextArea>, callback:Function=null):void {
				if (modifiedEditors.length <= 0) {
					if (callback != null) {
						callback();
					}
					return;
				}
				
				var editor:GonzoTextArea = modifiedEditors.shift();
				editor.setFocus();
				
				if (!editor.hasBeenSaved) {
					this.doFileSaveAsSeries(editor, modifiedEditors, callback);
					return;
				}
				
				GonzoUtils.writeStringToFilename(editor.fullPath, GonzoUtils.stripNonPrintableCharacters(editor.text));
				editor.isModified = false;
				editor.hasBeenSaved = true;
				gonzo.updateGonzoWithEditor(editor, false);
				
				this.doFileSaveSeries(modifiedEditors, callback);
			}
			
			private function doFileExportHtml():void {
				var editor:GonzoTextArea = gonzo.getCurrentEditor();
				
				if (editor == null) {
					return;
				}
				
				var file:File = File.documentsDirectory.resolvePath(editor.filename + ".html");
				file.addEventListener(Event.SELECT, function(event:Event):void {
					var saveFile:File = event.target as File;
					GonzoUtils.writeStringToFilename(saveFile.nativePath, gonzo.htmlRaw.text);
				});
				file.browseForSave("Export as HTML");
			}
			
			private function closeEditorAndUpdate(editor:GonzoTextArea):void {
				if (editor == null) {
					return;
				}
				gonzo.editorTabNavigator.removeChild(editor.parent);
				gonzo.callLater(function():void {
					editor = gonzo.getCurrentEditor();
					gonzo.updateGonzoWithEditor(editor, (editor == null ? false : editor.isModified));
				});
			}
			
			public function doFileClose():void {
				var editor:GonzoTextArea = gonzo.getCurrentEditor();
				if (editor == null) {
					return;
				}
				
				if (editor.isModified) {
					Alert.show(
						"'" + editor.filename + "' has been modified. Would you like to save it?",
						"Save your changes?",
						Alert.YES | Alert.NO | Alert.CANCEL,
						gonzo,
						function(event:CloseEvent):void {
							if (event.detail == Alert.YES) {
								gonzo.gonzoMenu.doFileSave(editor, closeEditorAndUpdate);
							} else if (event.detail == Alert.NO) {
								closeEditorAndUpdate(editor);
							} else if (event.detail == Alert.CANCEL) {
								return;
							}	
						}
					);
				} else {
					gonzo.editorTabNavigator.removeChild(editor.parent);
					gonzo.callLater(function():void {
						editor = gonzo.getCurrentEditor();
						gonzo.updateGonzoWithEditor(editor, (editor == null ? false : editor.isModified));
					});
				}
			}
			
			private function doEditUndo():void {
				var editor:GonzoTextArea = gonzo.getCurrentEditor();
				if (editor == null) {
					return;
				}
				
				var buffer:String = editor.popUndo();
				if (buffer != null) {
					editor.text = buffer;
					editor.setSelection(editor.getCaretIndex(), editor.getCaretIndex());
					editor.validateNow();
					gonzo.updateGonzoWithEditor(editor, true);
				}
			}
			
			private function doFileCloseAll():void {
				gonzo.checkForUnsavedEditors(function():void {
					gonzo.editorTabNavigator.removeAll();
					gonzo.updateGonzoWithEditor(null);
				});
			}
			
			private function doFormatShiftRight():void {
				var editor:GonzoTextArea = gonzo.getCurrentEditor();
				if (editor == null) {
					return;
				}
				editor.shiftRight();
			}
			
			private function doFormatShiftLeft():void {
				var editor:GonzoTextArea = gonzo.getCurrentEditor();
				if (editor == null) {
					return;
				}
				editor.shiftLeft();
			}
			
			private function doWindowPreview(toggled:Boolean):void {
				if (toggled) {
					gonzo.gonzoSeparator.visible = gonzo.gonzoSeparator.includeInLayout = true;
					gonzo.previewTabNavigator.visible = gonzo.previewTabNavigator.includeInLayout = true;
				} else {
					gonzo.gonzoSeparator.visible = gonzo.gonzoSeparator.includeInLayout = false;
					gonzo.previewTabNavigator.visible = gonzo.previewTabNavigator.includeInLayout = false;
					gonzo.editorTabNavigator.percentWidth = 100;
				}
			}
			
			private function doWindowWordWrap(doWrap:Boolean):void {
				for (var i:uint = 0; i < gonzo.editorTabNavigator.numChildren; i++) {
					var vbox:VBox = gonzo.editorTabNavigator.getChildAt(i) as VBox;
					var editor:GonzoTextArea = vbox.getChildByName("editor") as GonzoTextArea;
					editor.wordWrap = doWrap;
				}
			}
			
			private function doHelpCheatSheet():void {
				for (var i:uint = 0; i < gonzo.editorTabNavigator.numChildren; i++) {
					var vbox:VBox = gonzo.editorTabNavigator.getChildAt(i) as VBox;
					var editor:GonzoTextArea = vbox.getChildByName("editor") as GonzoTextArea;
					if (editor.isReference) {
						gonzo.editorTabNavigator.selectedIndex = i;
						return;
					}
				}
				
				editor = gonzo.createAndAddNewEditor(File.documentsDirectory.resolvePath(Gonzo.DEFAULT_FILENAME).nativePath);
				editor.isReference = true;
				editor.text = GonzoUtils.readStringFromFilename(File.applicationDirectory.nativePath + "/assets/cheat_sheet.md");
				gonzo.updateGonzoWithEditor(editor);
				editor.editable = false;
			}
			
			protected function gonzoItemClickHandler(event:FlexNativeMenuEvent):void
			{
				var node:XML = event.item as XML;
				var id:String = node.@id;
				var editor:GonzoTextArea = gonzo.getCurrentEditor();
				var linkWindow:GonzoLinkWindow;
				
				if (id.substr(0, 9) == "markdown_") {
					if (editor == null) {
						return;
					}
				}
			
				if (id == "fileNew") {
					this.doFileNew();
				} else if (id == "file_open") {
					this.doFileOpen();
				} else if (id == "file_save") {
					this.doFileSave();
				} else if (id == "file_saveAs") {
					this.doFileSaveAs();
				} else if (id == "file_saveAll") {
					gonzo.checkForUnsavedEditors();
				} else if (id == "file_close") {
					this.doFileClose();	
				} else if (id == "file_closeAll") {
					this.doFileCloseAll();
				}  else if (id == "file_export_html") {
					this.doFileExportHtml();
				} else if (id == "file_exit") {
					gonzo.checkForUnsavedEditors(NativeApplication.nativeApplication.exit);
				} else if (id == "edit_undo") { 
					this.doEditUndo();
				} else if (id == "edit_redo") { 
					// TODO
				}else if (id == "edit_cut") { 
					NativeApplication.nativeApplication.cut();
				} else if (id == "edit_copy") { 
					NativeApplication.nativeApplication.copy();
				} else if (id == "edit_paste") { 
					NativeApplication.nativeApplication.paste();
				} else if (id == "edit_selectAll") { 
					NativeApplication.nativeApplication.selectAll();
				} else if (id == "format_shiftRight") {
					this.doFormatShiftRight();
				} else if (id == "format_shiftLeft") {
					this.doFormatShiftLeft();
				} else if (id == "window_preview") {
					this.doWindowPreview(node.@toggled == "true");
				} else if (id == "format_wordWrap") {
					this.doWindowWordWrap(node.@toggled == "true");
				} else if (id == "help_tutorial") {
					this.doHelpCheatSheet();
				} else if (id == "markdown_linkInline") {
					editor.doLinkInline();
				} else if (id == "markdown_imageInline") {
					editor.doImageInline();
				} else if (id == "markdown_link") {
					linkWindow = PopUpManager.createPopUp(gonzo, GonzoLinkWindow, true) as GonzoLinkWindow;
					linkWindow.editor = editor;
					linkWindow.isImage.selected = false;
					PopUpManager.centerPopUp(linkWindow);
				} else if (id == "markdown_image") {
					linkWindow = PopUpManager.createPopUp(gonzo, GonzoLinkWindow, true) as GonzoLinkWindow;
					linkWindow.editor = editor;
					linkWindow.isImage.selected = true;
					PopUpManager.centerPopUp(linkWindow);
				} else if (id == "markdown_em") {
					editor.doEmphasisTextRange();
				} else if (id == "markdown_strong") {
					editor.doStrongTextRange();
				} else if (id == "markdown_codeInline") {
					editor.doCodeTextRange();
				} else if (id.substr(0, id.length-1) == "markdown_heading") {
					editor.doHeading(int(id.substr(length-2)));
				} else if (id == "markdown_blockquote") {
					editor.shiftBlockquote();
				} else if (id == "markdown_codeBlock") {
					editor.shiftCodeBlock();
				} else if (id == "markdown_hr") {
					editor.doHorizontalRule();
				} else {
					trace(event.label + "(" + id + ")");
				}
			}
			
			private function keyEquivalentModifiers(item:Object):Array
			{
				var result:Array = new Array();
				
				var keyEquivField:String = this.keyEquivalentField;
				var altKeyField:String;
				var ctrlKeyField:String;
				var shiftKeyField:String;
				if (item is XML)
				{
					altKeyField = "@altKey";
					ctrlKeyField = "@controlKey";
					shiftKeyField = "@shiftKey";
				}
				else if (item is Object)
				{
					altKeyField = "altKey";
					ctrlKeyField = "controlKey";
					shiftKeyField = "shiftKey";
				}
				
				if (item[keyEquivField] == null || item[keyEquivField].length == 0)
				{
					return result;
				}
				
				if (item[altKeyField] != null && item[altKeyField] == true)
				{
					if (isWin)
					{
						result.push(Keyboard.ALTERNATE);
					}
				}
				
				if (item[ctrlKeyField] != null && item[ctrlKeyField] == true)
				{
					if (isWin)
					{
						result.push(Keyboard.CONTROL);
					}
					else if (isMac)
					{
						result.push(Keyboard.COMMAND);
					}
				}
				
				if (item[shiftKeyField] != null && item[shiftKeyField] == true)
				{
					result.push(Keyboard.SHIFT);
				}
				
				return result;
			}

		]]>
	</fx:Script>
</mx:FlexNativeMenu>
