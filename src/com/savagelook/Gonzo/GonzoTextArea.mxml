<?xml version="1.0" encoding="utf-8"?>
<mx:TextArea xmlns:fx="http://ns.adobe.com/mxml/2009" 
			xmlns:s="library://ns.adobe.com/flex/spark" 
			xmlns:mx="library://ns.adobe.com/flex/mx"
			keyFocusChange="onKeyFocusChange(event)"
			mouseUp="onMouseUp(event)"
			creationComplete="onCreationComplete(event)"
			>
	<fx:Script>
		<![CDATA[
			import com.adobe.linguistics.spelling.SpellUI;
			
			import mx.controls.textClasses.TextRange;
			import mx.core.mx_internal;
			import mx.events.FlexEvent;
			use namespace mx_internal;
			
			private static const UNDO_BUFFER_SIZE:uint = 30;
			private static const SHIFT_DIRECTION_LEFT:String = "LEFT";
			private static const SHIFT_DIRECTION_RIGHT:String = "RIGHT";
			private static const SHIFT_BLOCKQUOTE:String = "BLOCKQUOTE";
			private static const SHIFT_CODEBLOCK:String = "CODEBLOCK";
			
			private var _undoStack:Vector.<String> = new Vector.<String>();
			private var _undoNext:String = null;
			private var _fullPath:String;
			private var _isModified:Boolean = false;
			private var _updateInterval:uint;
			private var _isReference:Boolean = false;
			private var _hasBeenSaved:Boolean = false;

			protected function onCreationComplete(event:FlexEvent):void
			{				
				var self:GonzoTextArea = this;
				var cm:ContextMenu = (this.getTextField() as TextField).contextMenu as ContextMenu;
				//cm.hideBuiltInItems();
				var cmi:ContextMenuItem = new ContextMenuItem("Strong");
				cmi.addEventListener(Event.SELECT, function(e:Event):void {
					self.wrapCurrentTextRange("**");
				});
				cm.customItems.unshift(cmi);
				
				(this.getTextField() as TextField).contextMenu = cm;
				SpellUI.enableSpelling(this, "en_US");
				//this.contextMenu.removeAllItems();
				
				
			}
			
			protected function onKeyFocusChange(event:FocusEvent):void
			{
				event.preventDefault();
				var range:TextRange = new TextRange(this, true);
				if (range.beginIndex != range.endIndex) {
					if (event.shiftKey) {
						this.shiftLeft();
					} else {
						this.shiftRight();
					}
				} else {
					this.textField.replaceSelectedText("    ");
				}
			}
			
			protected function onMouseUp(event:MouseEvent):void
			{
				var range:TextRange = new TextRange(this, true);
				while (range.text.length > 0 &&
					   range.text.charAt(range.text.length-1).search(/[\r\n]/) != -1) {
					this.setSelection(range.beginIndex, range.endIndex-1);
					this.validateNow();
					range = new TextRange(this, true);
				}
				
				while (range.text.length > 0 &&
					   range.text.charAt(0).search(/[\r\n]/) != -1) {
					this.setSelection(range.beginIndex+1, range.endIndex);
					this.validateNow();
					range = new TextRange(this, true);
				}
				
				range = null;
			}
			
			// Markdown editing functions
			public function wrapCurrentTextRange(wrapper:String):void {
				var range:TextRange = new TextRange(this, true);
				if (range.text.length == 0) {
					return;
				}
				range.text = wrapper + range.text + wrapper;
				this.dispatchEvent(new Event(Event.CHANGE));
			}
			
			public function doHorizontalRule():void {
				var range:TextRange = new TextRange(this, true);
				var pattern1:RegExp = /[\r\n]$/;
				var newText1:String = this.text.substring(0, range.beginIndex);
				newText1 += newText1.search(pattern1) == -1 && range.beginIndex != 0 ? "\n" : "";
				newText1 += "***";
				pattern1 = /^[\r\n]/;
				newText1 += this.text.substr(range.beginIndex).search(pattern1) == -1 && range.beginIndex != this.text.length-1 ? "\n" : "";
				newText1 += this.text.substr(range.beginIndex);
				this.text = newText1;
				this.dispatchEvent(new Event(Event.CHANGE));
			}
			
			public function doImageInline():void {
				this._doLinkOrImageInline(true);
			}
			
			public function doLinkInline():void {
				this._doLinkOrImageInline(false);
			}
			
			private function _doLinkOrImageInline(isImage:Boolean = false):void {
				var range:TextRange = new TextRange(this, true);
				var origText:String = range.text;
				range.text = (isImage ? "!" : "") + "[" + range.text + "]()";
				
				// the range is blank, put the cursor in the square brackets.
				// if the range is a selection, put the cursor in the parens.
				if (origText.length == 0) {
					this.setSelection(
						range.beginIndex + (isImage ? 2 : 1), 
						range.beginIndex + (isImage ? 2 : 1)
					);
				} else {
					this.setSelection(
						range.beginIndex + range.text.length - 1, 
						range.beginIndex + range.text.length - 1
					);
				}
			}
			
			public function doHeading(level:uint):void {
				var tmp:int;
				var range:TextRange = new TextRange(this, true);
				var index:int = ((tmp = this.text.substring(0, range.beginIndex > 0 ? range.beginIndex : 0).lastIndexOf("\r")) == -1 ? 0 : tmp+1);
				var newText:String = this.text.substring(0, index);
				
				var hashMarks:String = "";
				for (var i:uint = 0; i < level; i++) {
					hashMarks += "#";
				}
				var pattern:RegExp = /^((?:>[\s\t])*)#*[\s\t]*/;
				newText += this.text.substring(index).replace(pattern, "$1" + hashMarks + " ");
				this.text = newText;
				
				// position the cursor
				this.setSelection(
					index + level + 1,
					index + level + 1
				);
				this.dispatchEvent(new Event(Event.CHANGE));
			}
			
			// Shifting
			private function getCurrentShiftChunk():String {
				var tmp:int;
				var range:TextRange = new TextRange(this, true);
				var beginChunk:int = ((tmp = this.text.substring(0, range.beginIndex > 0 ? range.beginIndex : 0).lastIndexOf("\r")) == -1 ? 0 : tmp+1);
				var endChunk:int = ((tmp = this.text.substring(range.endIndex).indexOf("\r")) == -1 ? this.text.length : tmp + range.endIndex);
				return this.text.substring(beginChunk, endChunk);
			}
			
			private function _shiftText(direction:String):void {
				var tmp:int;
				var range:TextRange = new TextRange(this, true);
				var beginChunk:int = ((tmp = this.text.substring(0, range.beginIndex).lastIndexOf("\r")) == -1 ? 0 : tmp+1);
				var endChunk:int = ((tmp = this.text.substring(range.endIndex).indexOf("\r")) == -1 ? this.text.length : tmp + range.endIndex);
				var shiftChunk:String = this.text.substring(beginChunk, endChunk);
				while (shiftChunk.length > 0 && shiftChunk.charAt(0).search(/[\r\n]/) != -1) {
					if (shiftChunk.length == 1) {
						shiftChunk = "";
						beginChunk++;
						break;
					}
					shiftChunk = shiftChunk.substr(1);
					beginChunk++;
				}
				while (shiftChunk.length > 0 && shiftChunk.charAt(shiftChunk.length-1).search(/[\r\n]/) != -1) {
					if (shiftChunk.length == 1) {
						shiftChunk = "";
						endChunk--;
						break;
					}
					shiftChunk = shiftChunk.substr(0, shiftChunk.length-1);
					endChunk--;
				}
				var lines:Array = shiftChunk.split(/[\r\n]/);
				var pattern:RegExp = /^\s{1,4}/;
				
				shiftChunk = "";
				for (var i:uint = 0; i < lines.length; i++) {
					if (direction == GonzoTextArea.SHIFT_DIRECTION_LEFT) {
						shiftChunk += lines[i].replace(pattern, "") + (i+1 == lines.length ? "" : "\n");
					} else if (direction == GonzoTextArea.SHIFT_DIRECTION_RIGHT || direction == GonzoTextArea.SHIFT_CODEBLOCK) {
						shiftChunk += "    " + lines[i] + (i+1 == lines.length ? "" : "\n");
					} else if (direction == GonzoTextArea.SHIFT_BLOCKQUOTE) {
						shiftChunk += "> " + lines[i] + (i+1 == lines.length ? "" : "\n");
					} 
				}
				
				this.setSelection(beginChunk, endChunk);
				this.validateNow();
				range = new TextRange(this, true);
				trace("------------------------\n" + range.text);
				if (direction == GonzoTextArea.SHIFT_BLOCKQUOTE) {
					var before:String = this.text.substring(0, range.beginIndex);
					var after:String = this.text.substring(range.endIndex);
					var prefix:String = "", suffix:String = "";
					
//					trace("BEFORE\n------");
//					for (var k:uint = 0; k < lines.length; k++) {
//						trace("'" + lines[k] + "'");
//					}
					
					lines = before.split(/[\r\n]/);
					if (lines.length == 0) {
						prefix = "";
					} else if (lines.length == 1 && lines[0] == "") {
						prefix = "";
					} else if (lines.length > 1 && 
						       lines[lines.length-1] == "" &&
							       (lines[lines.length-2] == "" || 
								   (lines[lines.length-2] as String).search(/^>\s*$/) != -1)
							  ) {
						prefix = "";
					} else {
						prefix = ">\n";
					}
					
					lines = after.split(/[\r\n]/);
					if (lines.length == 0) {
						suffix = "";
					} else if (lines.length == 1 && lines[0] == "") {
						suffix = "";
					} else if (lines.length > 1 && 
						lines[0] == "" &&
						(lines[1] == "" || (lines[1] as String).search(/^>\s*$/) != -1)
					) {
						suffix = "";
					} else {
						suffix = "\n>";
					}
					
					shiftChunk = prefix + shiftChunk + suffix;
				}
				range.text = shiftChunk;
				
				this.dispatchEvent(new Event(Event.CHANGE));
			}
			
			public function shiftRight():void {
				_shiftText(GonzoTextArea.SHIFT_DIRECTION_RIGHT);
			}
			
			public function shiftLeft():void {
				_shiftText(GonzoTextArea.SHIFT_DIRECTION_LEFT);
			}
			
			public function shiftBlockquote():void {
				_shiftText(GonzoTextArea.SHIFT_BLOCKQUOTE);
			}
			
			public function shiftCodeBlock():void {
				_shiftText(GonzoTextArea.SHIFT_CODEBLOCK);
			}
			
			public function getCaretIndex():int {
				return this.getTextField().caretIndex;
			}
			
			public function updateEditor():void {
				clearInterval(this.updateInterval);
				if (!this.isReference) {
					this.pushUndo(this.text);
				}
				this.dispatchEvent(new Event(Event.COMPLETE));	
			}
			
			public function pushUndo(string:String):void {
				while (_undoStack.length >= UNDO_BUFFER_SIZE) {
					_undoStack.pop();
				} 
				
				if (_undoNext != string) {
					if (_undoNext != null) {
						_undoStack.unshift(_undoNext);
					}
					_undoNext = string;
				}
			}
			
			public function popUndo():String {
				var undo:String;
				if (_undoStack.length > 0) {
					undo = _undoStack.shift();
					_undoNext = undo;
				} else {
					undo = null;
				}
				
				return undo;
			}
			
			////////// Helper Functions //////////
			public function printUndoStack():void {
				for (var i:uint = 0; i < _undoStack.length; i++) {
					trace("STACK[" + i.toString() + "]:" + _undoStack[i]);
				}
				trace("NEXT:" + _undoNext);
				trace("");
			}
			
			////////// Getters and Setters //////////
			public function get hasBeenSaved():Boolean
			{
				return _hasBeenSaved;
			}
			
			public function set hasBeenSaved(value:Boolean):void
			{
				_hasBeenSaved = value;
			}
			
			public function get isReference():Boolean
			{
				return _isReference;
			}
			
			public function set isReference(value:Boolean):void
			{
				_isReference = value;
			}
			
			public function get filename():String
			{
				return GonzoUtils.getFilenameFromPath(_fullPath);
			}
			
			public function get fullPath():String
			{
				return _fullPath;
			}
			
			public function set fullPath(value:String):void
			{
				_fullPath = value;
			}
			
			public function get isModified():Boolean
			{
				return _isModified;
			}
			
			public function set isModified(value:Boolean):void
			{
				_isModified = value;
			}
			
			public function get updateInterval():uint
			{
				return _updateInterval;
			}
			
			public function set updateInterval(value:uint):void
			{
				_updateInterval = value;
			}

		]]>
	</fx:Script>
</mx:TextArea>
