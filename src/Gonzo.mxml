<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:gonzo="com.savagelook.Gonzo.*"
			   minWidth="200" minHeight="200" width="800" height="600" 
			   initialize="init();"
			   creationComplete="initUI();"
			   skinClass="com.savagelook.Gonzo.skins.GonzoAppSkin">
	<fx:Script>
		<![CDATA[
			import com.adobe.linguistics.spelling.SpellUI;
			import com.savagelook.Gonzo.GonzoSeparatorEvent;
			
			import mx.controls.ProgressBar;
			
			[SkinPart(required="true", type="mx.controls.ProgressBar")]
			public var progressBar:ProgressBar;

			private static const preHtml:String = "<html><head><style>h1 { color:#ff0000; }</style></head><body>";
			private static const postHtml:String = "</body></html>";
			private static const APP_NAME:String = "Gonzo";
			private static const EDITOR_WIDTH_MINIMUM:Number = 150;
			private static const DEFAULT_FILENAME:String = "Untitled.md"
			
			public var currentMarkdownFile:String = "";
			private var currentCssFile:String = "";
			private var updateGonzoInterval:uint;
			private var htmlVerticalScrollPosition:Number = 0;
			
			protected function init():void
			{
				// determine OS and setup menu
				gonzoMenu.isWin = (Capabilities.os.toLowerCase().indexOf("windows") >= 0);
				gonzoMenu.isMac = (Capabilities.os.toLowerCase().indexOf("mac os") >= 0);	
				gonzoMenu.gonzo = this;	
			}
			
			protected function initUI():void {
				// TODO check for recently loaded files, otherwise
				SpellUI.enableSpelling(markdownEditor, "en_US");
				
				// resize the markdown and html editors when the separator is moved
				gonzoSeparator.addEventListener(GonzoSeparatorEvent.SEPARATOR_MOVED, function(event:GonzoSeparatorEvent):void {
					if (event.stageX - mainGroupLayout.paddingLeft > EDITOR_WIDTH_MINIMUM &&
						event.stageX < mainGroup.width - mainGroupLayout.paddingRight - EDITOR_WIDTH_MINIMUM) {
						editorGroup.width = event.stageX - 12;
					}
				});
				
				// update Gonzo whenever we type in the markdown or css editor
				markdownEditor.addEventListener(KeyboardEvent.KEY_UP, this.doEditorUpdate);
				cssEditor.addEventListener(KeyboardEvent.KEY_UP, this.doEditorUpdate);
				
				// maintain the vertical scroll position of the html preview
				htmlRendered.addEventListener(Event.COMPLETE, function(e:Event):void {
					(e.target as HTML).verticalScrollPosition = htmlVerticalScrollPosition;
					progressBar.visible = false;
				});
				
				this.updateGonzo(DEFAULT_FILENAME);
			}
			
			private function doEditorUpdate(e:KeyboardEvent):void {
				clearInterval(updateGonzoInterval);
				progressBar.visible = true;
				updateGonzoInterval = setInterval(updateGonzo, 500);
			}

			public function updateGonzo(filename:String = ""):void {	
				var markdown:String = this.markdownEditor.text;
				var wordCount:uint = StringUtils.wordCount(markdown);
				var rawHtml:String = Showdown.makeHtml(markdown);
				var fullHtml:String = this.constructFullHtml(rawHtml);
				
				this.htmlVerticalScrollPosition = this.htmlRendered.verticalScrollPosition;	
				this.htmlRendered.htmlText = fullHtml;
				this.htmlRaw.text = rawHtml;
				this.statusText.text = "Word Count: " + wordCount.toString();
				if (filename != "") {
					this.title = APP_NAME + " - " + filename;
				}
			}
			
			private function constructFullHtml(rawHtml:String):String {
				const html1:String = "<html><head>";
				const html2:String = "</head><body>";
				const html3:String = "</body></html>";
				
				var html:String = html1;
				if (cssEditor.text != "") {
					html += "<style>" + cssEditor.text + "</style>";
				}
				html += html2 + rawHtml + html3;
				
				return html;
			}
		]]>
	</fx:Script>

	<s:menu>
		<gonzo:GonzoNativeMenu id="gonzoMenu"/>
	</s:menu>	
	
	<s:Group width="100%" height="100%" id="mainGroup">
		<s:layout>
			<s:HorizontalLayout gap="0" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10" id="mainGroupLayout" verticalAlign="bottom"/>
		</s:layout>
		
		
		
		<s:VGroup id="editorGroup" width="100%" height="100%" gap="0">
			<s:ButtonBar dataProvider="{editorViewStack}"/>
			<mx:ViewStack id="editorViewStack"
						  borderStyle="solid"
						  width="100%" height="100%" creationPolicy="all">
				<s:NavigatorContent id="markdownEditorTab" label="markdown">
					<gonzo:GonzoTextArea id="markdownEditor" height="100%" width="100%" fontFamily="Monaco" fontSize="16"/>
				</s:NavigatorContent>
				<s:NavigatorContent id="cssEditorTab" label="css">
					<gonzo:GonzoTextArea id="cssEditor" height="100%" width="100%" fontFamily="Monaco" fontSize="16"/>
				</s:NavigatorContent>
			</mx:ViewStack>
		</s:VGroup>
		
		<gonzo:GonzoSeparator id="gonzoSeparator" height="{editorViewStack.height}"/>
		
		<s:VGroup width="100%" height="100%" gap="0">
			<s:ButtonBar dataProvider="{previewViewStack}"/>
			<mx:ViewStack id="previewViewStack"
						  borderStyle="solid"
						  width="100%" height="100%" creationPolicy="all">
				<s:NavigatorContent id="htmlRenderedTab" label="preview">
					<mx:HTML id="htmlRendered" width="100%" height="100%" tabEnabled="false" tabFocusEnabled="false"/>
				</s:NavigatorContent>
				<s:NavigatorContent id="htmlRawTab" label="html">
					<s:TextArea id="htmlRaw" width="100%" height="100%" tabEnabled="false" tabFocusEnabled="false" editable="false"  fontFamily="Monaco" fontSize="16"/>
				</s:NavigatorContent>
			</mx:ViewStack>
		</s:VGroup>
	</s:Group>
</s:WindowedApplication>
