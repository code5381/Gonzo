<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:gonzo="com.savagelook.Gonzo.*"
			   xmlns:flexlib="http://code.google.com/p/flexlib/"
			   minWidth="200" minHeight="200" width="800" height="600" 
			   initialize="onInitialize();"
			   creationComplete="onCreationComplete();"
			   closing="onClosing(event)"
			   skinClass="com.savagelook.Gonzo.skins.GonzoAppSkin">
	<fx:Script>
		<![CDATA[
			import com.adobe.linguistics.spelling.SpellUI;
			import com.savagelook.Gonzo.GonzoSeparatorEvent;
			import com.savagelook.Gonzo.GonzoUtils;
			
			import flexlib.controls.tabBarClasses.SuperTab;
			import flexlib.events.SuperTabEvent;
			
			import mx.containers.VBox;
			import mx.controls.Alert;
			import mx.controls.ProgressBar;
			import mx.events.CloseEvent;
			import mx.events.IndexChangedEvent;
			
			[SkinPart(required="true", type="mx.controls.ProgressBar")]
			public var progressBar:ProgressBar;

			private static const preHtml:String = "<html><head><style>h1 { color:#ff0000; }</style></head><body>";
			private static const postHtml:String = "</body></html>";
			private static const APP_NAME:String = "Gonzo";
			private static const EDITOR_WIDTH_MINIMUM:Number = 150;
			public static const DEFAULT_FILENAME:String = "Untitled";
			public static const DEFAULT_EXTENSION:String = "md";
			public static var UNTITLED_INDEX:int = 1;

			private var htmlVerticalScrollPosition:Number = 0;
			
			private function onInitialize():void
			{
				gonzoMenu.isWin = (Capabilities.os.toLowerCase().indexOf("windows") >= 0);
				gonzoMenu.isMac = (Capabilities.os.toLowerCase().indexOf("mac os") >= 0);	
				gonzoMenu.gonzo = this;	
				GonzoUtils.DEFAULT_FILENAME = Gonzo.DEFAULT_FILENAME;
			}
			
			private function onCreationComplete():void {
				this.gonzoSeparator.addEventListener(GonzoSeparatorEvent.SEPARATOR_MOVED, this.onSeparatorMoved);
				this.htmlRendered.addEventListener(Event.COMPLETE, this.onHtmlComplete);
				this.editorTabNavigator.addEventListener(IndexChangedEvent.CHANGE, onEditorTabChange);
			}
			
			protected function onClosing(event:Event):void
			{
				this.checkForUnsavedEditors(NativeApplication.nativeApplication.exit);
				event.stopPropagation();
				event.preventDefault();
			}
			
			
			////////// Event Handlers for editors, html, and separator //////////
			private function onEditorTabChange(event:IndexChangedEvent):void {
				var editor:GonzoTextArea = ((event.target as SuperTabNavigator).getChildAt(event.newIndex) as VBox).getChildByName("editor") as GonzoTextArea;
				this.updateGonzoWithEditor(editor, editor.isModified);
				editor.setFocus();
			}
			
			private function onEditorChange(event:Event):void {
				var editor:GonzoTextArea = event.target as GonzoTextArea;
				this.updateGonzoWithEditor(editor, true);
			}
			
			private function onSeparatorMoved(event:GonzoSeparatorEvent):void {
				if (event.stageX - mainGroupLayout.paddingLeft > EDITOR_WIDTH_MINIMUM &&
					event.stageX < mainGroup.width - mainGroupLayout.paddingRight - EDITOR_WIDTH_MINIMUM) {
					editorTabNavigator.width = event.stageX - 12;
				}
			}
			
			private function onHtmlComplete(event:Event):void {
				(event.target as HTML).verticalScrollPosition = this.htmlVerticalScrollPosition;
				progressBar.visible = false;
			}
			
			private function onEditorComplete(event:Event):void {	
				var editor:GonzoTextArea = event.target as GonzoTextArea;
				var rawHtml:String = Showdown.makeHtml(editor.text);
				var fullHtml:String = this.constructFullHtml(rawHtml);
				
				this.htmlVerticalScrollPosition = this.htmlRendered.verticalScrollPosition;
				this.htmlRendered.htmlText = fullHtml;
				this.htmlRaw.text = rawHtml;				
			}
			
			protected function onEditorTabClose(event:SuperTabEvent):void {
				var editor:GonzoTextArea = (this.editorTabNavigator.getChildAt(event.tabIndex) as VBox).getChildByName("editor") as GonzoTextArea;
				
				if (editor.isModified) {
					event.stopPropagation();
					event.preventDefault();
					this.gonzoMenu.doFileClose();
				} 	
				
				callLater(function():void {
					var e:GonzoTextArea = getCurrentEditor();
					updateGonzoWithEditor(e, (e == null ? false : e.isModified));
				});
			}
			////////// Event Handlers for editors, html, and separator //////////
			
			
			////////// Helper Functions //////////
			public function getCurrentEditor():GonzoTextArea {
				var vbox:VBox = this.editorTabNavigator.selectedChild as VBox;
				if (vbox != null) {
					return vbox.getChildByName("editor") as GonzoTextArea;
				} else {
					return null;
				}
			}
			
			private function constructFullHtml(rawHtml:String, css:String = ""):String {
				const html1:String = "<html><head>";
				const html2:String = "</head><body>";
				const html3:String = "</body></html>";
				
				var html:String = html1;
				if (css != "") {
					html += "<style>" + css + "</style>";
				}
				html += html2 + rawHtml + html3;
				
				return html;
			}
			////////// Helper Functions //////////
			
			
			public function updateGonzoWithEditor(editor:GonzoTextArea, isEditorModified:Boolean = false):void {
				if (editor == null) {
					this.title = APP_NAME;
					this.statusText.text = "Word Count: 0";
					this.htmlVerticalScrollPosition = 0;
					this.htmlRendered.htmlText = "";
					this.htmlRaw.text = "";
					return;
				}
				
				clearInterval(editor.updateInterval);
				progressBar.visible = true;
				editor.isModified = isEditorModified;
				
				var tab:VBox = editor.parent as VBox;
				var wordCount:uint = StringUtils.wordCount(editor.text);
				tab.label = (editor.isReference ? "cheat sheet" : editor.filename) + (isEditorModified ? "*" : "");
				this.title = APP_NAME + " - " + tab.label;
				this.statusText.text = "Word Count: " + wordCount.toString();
				
				editor.updateInterval = setInterval(editor.updateEditor, 500);
			}

			public function checkForUnsavedEditors(command:Function):void {
				var tabNavigator:SuperTabNavigator = this.editorTabNavigator;
				var modifiedEditors:Vector.<GonzoTextArea> = new Vector.<GonzoTextArea>();
				var modifiedList:String = "";
				
				// traverse list of editor tabs looking for ones that are modified
				for (var i:uint = 0; i < tabNavigator.numChildren; i++) {
					var child:Object = tabNavigator.getChildAt(i);
					if (child is VBox) {
						var editor:GonzoTextArea = (child as VBox).getChildByName("editor") as GonzoTextArea;
						if (editor != null && editor.isModified) {
							modifiedEditors.push(editor);
							modifiedList += "        " + editor.fullPath + "\r";
						}
					}
				}

				if (modifiedEditors.length == 0) {
					command();
					return;
				}
				
				Alert.show(
					"The following files have been modified. Would you like to save them?\r\n" + modifiedList,
					"Save your changes?",
					Alert.YES | Alert.NO | Alert.CANCEL,
					this,
					function(event:CloseEvent):void {
						if (event.detail == Alert.YES) {
							gonzoMenu.doFileSaveSeries(modifiedEditors, command);
						} else if (event.detail == Alert.NO) {
							command();
						} else if (event.detail == Alert.CANCEL) {
							return;
						}	
					}
				);
			}
			
			public function createAndAddNewEditor(filename:String = DEFAULT_FILENAME):GonzoTextArea {
				var vbox:VBox = new VBox();
				vbox.label = GonzoUtils.getFilenameFromPath(filename);
				
				var editor:GonzoTextArea = new GonzoTextArea();
				editor.name = "editor";
				editor.fullPath = filename;
				editor.percentHeight = 100;
				editor.percentWidth = 100;
				editor.setStyle("fontFamily", "Monaco");
				editor.setStyle("fontSize", 16);
				
				vbox.addChild(editor);
				editorTabNavigator.addChild(vbox);
				editorTabNavigator.selectedIndex = editorTabNavigator.numChildren-1;
				editor.addEventListener(Event.CHANGE, this.onEditorChange);
				editor.addEventListener(Event.COMPLETE, this.onEditorComplete);
				editor.setFocus();
				
				return editor;
			}

		]]>
	</fx:Script>

	<s:menu>
		<gonzo:GonzoNativeMenu id="gonzoMenu"/>
	</s:menu>	
	
	<s:SkinnableContainer width="100%" height="100%" id="topGroup">
		<s:layout>
			<s:VerticalLayout gap="0" horizontalAlign="center"/>
		</s:layout>
		<!--
		<s:ButtonBar>
			<mx:ArrayCollection>
				<fx:String>H1</fx:String>
				<fx:String>H2</fx:String>
				<fx:String>H3</fx:String>
				<fx:String>H4</fx:String>
				<fx:String>H5</fx:String>
				<fx:String>H6</fx:String>
				<fx:String>&lt;em&gt;</fx:String>
				<fx:String>&lt;strong&gt;</fx:String>
			</mx:ArrayCollection>
		</s:ButtonBar>
		-->
		<s:SkinnableContainer width="100%" height="100%" id="mainGroup">
			<s:layout>
				<s:HorizontalLayout gap="0" paddingLeft="10" paddingRight="10" paddingTop="7" paddingBottom="10" id="mainGroupLayout" verticalAlign="bottom"/>
			</s:layout>
			
			<flexlib:SuperTabNavigator id="editorTabNavigator"
									   scrollSpeed="25"
									   stopScrollingEvent="{MouseEvent.MOUSE_UP}"
									   startScrollingEvent="{MouseEvent.MOUSE_DOWN}"
									   width="100%"
									   height="99%"
									   horizontalGap="0"
									   paddingTop="0"
									   paddingBottom="0"
									   backgroundColor="0xbbbbbb"
									   closePolicy="{SuperTab.CLOSE_ROLLOVER}"
									   tabClose="onEditorTabClose(event)"
									   creationPolicy="all">
			</flexlib:SuperTabNavigator>
			
			<gonzo:GonzoSeparator id="gonzoSeparator" height="{editorTabNavigator.height}"/>
			
			<mx:TabNavigator id="previewTabNavigator" width="100%" height="99%" creationPolicy="all" borderStyle="solid" paddingTop="0" paddingBottom="0">
				<mx:VBox label="preview">
					<mx:HTML id="htmlRendered" height="100%" width="100%" borderStyle="solid"/>	
				</mx:VBox>
				<mx:VBox label="html">
					<s:TextArea id="htmlRaw" height="100%" width="100%" editable="false" fontFamily="Monaco" fontSize="16"/>
				</mx:VBox>	
				<mx:VBox label="css" id="cssEditorTab">
					<gonzo:GonzoTextArea id="cssEditor" height="100%" width="100%" fontFamily="Monaco" fontSize="16"/>
				</mx:VBox>
			</mx:TabNavigator>
		</s:SkinnableContainer>
	</s:SkinnableContainer>
</s:WindowedApplication>
