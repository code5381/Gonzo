<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:gonzo="com.savagelook.Gonzo.*"
			   minWidth="200" minHeight="200" width="800" height="600" 
			   initialize="init();"
			   creationComplete="initUI();"
			   skinClass="com.savagelook.Gonzo.GonzoAppSkin">
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.edit.EditManager;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.FlexNativeMenuEvent;
			import mx.events.ResizeEvent;
			import mx.managers.CursorManager;

			private static const preHtml:String = "<html><head><style>h1 { color:#ff0000; }</style></head><body>";
			private static const postHtml:String = "</body></html>";
			private static const EDITOR_WIDTH_MINIMUM:Number = 100;
			
			private var cursorID:Number = 0;
			private var isMoving:Boolean = false;
			
			private var currentMarkdownFile:String = "";
			private var currentCssFile:String = "";
			
			[Embed(source="flip_vertical.png")]
			private var resizeCursorSymbol:Class;
			
			protected function init():void
			{
				gonzoMenu.isWin = (Capabilities.os.toLowerCase().indexOf("windows") >= 0);
				gonzoMenu.isMac = (Capabilities.os.toLowerCase().indexOf("mac os") >= 0);				
			}

			protected function initUI():void {
				// TODO check for recently loaded files, otherwise
				this.title = "Gonzo - Untitled";
			}
			
			private function updateTitle(filename:String):void {
				if (filename != "") {
					this.title = "Gonzo - " + filename;
				}
			}
			
			private function updateGonzo(filename:String = ""):void {
				var html:String = Showdown.makeHtml(myText.text);
				var rawText:String = StringUtils.stripTags(html);
				var wordCount:uint = StringUtils.wordCount(rawText);
				
				myHtml.htmlText = preHtml + html + postHtml;
				this.statusText.text = "Word Count: " + wordCount.toString();
				this.updateTitle(filename);	
			}
			
			protected function textarea1_keyUpHandler(event:KeyboardEvent):void
			{
				updateGonzo();
			}

			protected function myText_keyDownHandler(event:KeyboardEvent):void
			{
				if(event.keyCode == Keyboard.TAB) 
				{
					var mgr:EditManager = TextArea(event.currentTarget).textFlow.interactionManager as EditManager;
					mgr.insertText("\t");
					event.stopPropagation();
					event.preventDefault();
				}
			}
			
			
			
			private function fileSaveComplete(event:Event):void {
				var file:File = event.target as File;
				this.currentMarkdownFile = file.nativePath;
				this.updateTitle(this.currentMarkdownFile);
			}
			
			private function fileOpenComplete(event:Event):void {
				var file:File = event.target as File;
				var fs:FileStream = new FileStream();
				fs.open(file, FileMode.READ);
				var text:String = cleanStringForEditor(fs.readMultiByte(fs.bytesAvailable, "utf-8"));
				fs.close();
				myText.text = text;
				this.currentMarkdownFile = file.nativePath;
				this.updateTitle(this.currentMarkdownFile);
			}
			
			private function doSaveAs():void {
				var file:File = new File();
				file.addEventListener(Event.COMPLETE, fileSaveComplete);
				file.save(cleanStringForEditor(myText.text), "test.md");
			}
			
			private function doSave():void {
				var file:File = new File(this.currentMarkdownFile);
				var fs:FileStream = new FileStream();
				fs.open(file, FileMode.WRITE);
				fs.writeMultiByte(cleanStringForEditor(myText.text), "utf-8");
				fs.close();
			}
			
			private function cleanStringForEditor(str:String):String {
				var newStr:String = "";
				for (var i:uint = 0; i < str.length; i++) {
					var char:int = str.charCodeAt(i);
					if ((char < 32 || char > 126) && (char != 9 && char != 10 && char != 13)) {
						continue;
					}
					newStr += String.fromCharCode(char);
				}
				return newStr;
			}
			
			private function menuItemClick(event:FlexNativeMenuEvent):void {
				var node:XML = event.item as XML;
				var id:String = node.attribute("id");
				var file:File;
				
				if (id == "file_new") {
					Alert.show("NEW!!!");
				} else if (id == "file_open") {
					file = new File();
					file.addEventListener(Event.SELECT, fileOpenComplete);
					file.browseForOpen("Open a markdown file...");
				} else if (id == "file_save") {
					if (this.currentMarkdownFile == "") {
						this.doSaveAs();
					} else {
						this.doSave();
					}
				} else if (id == "file_saveAs") {
					this.doSaveAs();
				} else if (id == "file_exit") {
					// check for unsaved buffers
					NativeApplication.nativeApplication.exit();
				} else {
					trace(event.label);
				}
			}
			
			private function textAreaResize(event:ResizeEvent):void {
				var groupHeight:Number = mainGroup.height - mainGroupLayout.paddingBottom - mainGroupLayout.paddingTop;
			}
			
			private function separatorMouseOver(event:MouseEvent):void {
				trace("separatorMouseOver");
				cursorID = CursorManager.setCursor(resizeCursorSymbol,2,-8,0);
			}
			
			private function separatorMouseOut(event:MouseEvent):void {
				trace("separatorMouseOut");
				CursorManager.removeCursor(cursorID);
			}
			
			private function separatorMouseDown(event:MouseEvent):void {
				trace("separatorMouseDown");

				systemManager.topLevelSystemManager.addEventListener(MouseEvent.MOUSE_MOVE, stageMouseMove, true);
				systemManager.topLevelSystemManager.addEventListener(MouseEvent.MOUSE_UP, function(e:MouseEvent):void {
					trace("stageMouseUp");
					systemManager.topLevelSystemManager.removeEventListener(MouseEvent.MOUSE_MOVE, stageMouseMove, true);
				}, true);
			}
			
			private function stageMouseMove(event:MouseEvent):void {
				if (event.stageX - mainGroupLayout.paddingLeft > EDITOR_WIDTH_MINIMUM &&
					event.stageX < mainGroup.width - mainGroupLayout.paddingRight - EDITOR_WIDTH_MINIMUM) {
					trace("stageMouseMove");
					myText.width = event.stageX - 12;
				}
			}

		]]>
	</fx:Script>

	<s:menu>
		<gonzo:GonzoNativeMenu id="gonzoMenu" itemClick="menuItemClick(event);"/>
	</s:menu>	
	
	<s:Group x="0" y="0" width="100%" height="100%" id="topGroup">
		<s:layout>
			<s:VerticalLayout gap="0"/>
		</s:layout>
	
		<s:Group x="0" width="100%" height="100%" id="mainGroup">
			<s:layout>
				<s:HorizontalLayout gap="0" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" id="mainGroupLayout"/>
			</s:layout>
			
			<s:TextArea id="myText" width="100%" height="100%"
						fontFamily="monaco" fontSize="16" resize="textAreaResize(event);"
						keyUp="textarea1_keyUpHandler(event)" keyDown="myText_keyDownHandler(event)">
			</s:TextArea>
			<s:SkinnableComponent id="mySep" height="100%" 
								  width="5" skinClass="com.savagelook.Gonzo.GonzoSeparatorSkin"
								  mouseOver="separatorMouseOver(event);" 
								  mouseOut="separatorMouseOut(event);"
								  mouseDown="separatorMouseDown(event);"
								  />
			<mx:HTML id="myHtml" width="100%" height="100%" 
					 borderColor="#000000"
					 borderStyle="solid" borderVisible="true" tabEnabled="false" tabFocusEnabled="false"/>
		</s:Group>
	</s:Group>
</s:WindowedApplication>
